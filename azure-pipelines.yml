

trigger:
- main

pool:
  vmImage: ubuntu-latest

# Define variables

# Stage-1: Terraform Validate Stage
stages:
  - stage: validateterraform
    displayName: Terraform Validate Stage
    jobs: 
      - job: validateterraform
        continueOnError: false
        ## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
        steps:
          - task: PublishPipelineArtifact@1
            displayName: publish Pipeline Artifact
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifest'
              artifact: 'terraform-manifest-out'
              publishLocation: 'pipeline'
          ## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
          - task: TerraformInstaller@0
            displayName: Terraform install
            inputs:
              terraformVersion: 'latest'

          ## Step-3: Validate Terraform Manifests (terraform init, terraform validate)
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifest'
              backendType: 'azurerm'
              backendServiceArm: 'devops-terraform-sp-conn'
              backendAzureRmSubscriptionId: '734b7b12-0396-4702-a8c6-f553ea8663fc'
              backendAzureRmResourceGroupName: 'terraform-backend'
              backendAzureRmStorageAccountName: 'kroostorage'
              backendAzureRmContainerName: 'terraformkroo'
              backendAzureRmKey: 'devopsterraform.tfs'
              allowTelemetryCollection: false

          - task: TerraformCLI@0
            displayName: Terraform validate
            inputs:
                command: 'validate'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifest'
                allowTelemetryCollection: false