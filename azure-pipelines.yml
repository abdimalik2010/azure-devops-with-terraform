

trigger:
- main

pool:
  vmImage: ubuntu-latest

## Step-1: Define Variables for environments
variables:
- name: DEV-ENV
  value: dev
- name: Qa-Env
  value: qa

# Stage-1: Terraform Validate Stage
stages:
  - stage: validateterraform
    displayName: Terraform Validate Stage
    jobs: 
      - job: validateterraform
        continueOnError: false
        ## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
        steps:
          - task: PublishPipelineArtifact@1
            displayName: publish Pipeline Artifact
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifest'
              artifact: 'terraform-manifest-out'
              publishLocation: 'pipeline'
          ## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
          - task: TerraformInstaller@0
            displayName: Terraform install
            inputs:
              terraformVersion: 'latest'

          ## Step-3: Validate Terraform Manifests (terraform init, terraform validate)
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifest'
              backendType: 'azurerm'
              backendServiceArm: 'devops-terraform-sp-conn'
              backendAzureRmSubscriptionId: '734b7b12-0396-4702-a8c6-f553ea8663fc'
              backendAzureRmResourceGroupName: 'terraform-backend'
              backendAzureRmStorageAccountName: 'kroostorage'
              backendAzureRmContainerName: 'terraformkroo'
              backendAzureRmKey: 
              allowTelemetryCollection: false

          - task: TerraformCLI@0
            displayName: Terraform validate
            inputs:
                command: 'validate'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifest'
                allowTelemetryCollection: false
                      
# Stage-2: Deploy Stages for Dev & QA
# Deployment-1: Deploy Dev AKS Cluster

  - stage: Deploy-cluster
    jobs:
      - deployment: deploycluster
        displayName: Deploy cluster
        pool:
          vmImage: "ubuntu-latest"
        strategy:
         runOnce:
           deploy:
           ## Step-2: Download SSH Secure File
             steps:
             - task: DownloadSecureFile@1
               displayName: Download SSH Key
               name: sshkey
               inputs:
                  secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'

             - task: TerraformCLI@0
               displayName: Terraform Init
               inputs:
                    command: 'init'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifest-out'
                    backendType: 'azurerm'
                    backendServiceArm: 'devops-terraform-sp-conn'
                    backendAzureRmSubscriptionId: '734b7b12-0396-4702-a8c6-f553ea8663fc'
                    backendAzureRmResourceGroupName: 'terraform-backend'
                    backendAzureRmStorageAccountName: 'kroostorage'
                    backendAzureRmContainerName: 'terraformkroo'
                    backendAzureRmKey: '$(DEV-ENV)-devopsterraform.tfs'
                    allowTelemetryCollection: false

             - task: TerraformCLI@0
               displayName: Terraform Plan
               inputs:
                      command: 'plan'
                      workingDirectory: '$(Pipeline.Workspace)/terraform-manifest-out'
                      commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var env=$(DEV_ENV) -out $(Pipeline.Workspace)/terraform-manifest-out/$(DEV_ENV)-$(Build.BuildId).out'
                      allowTelemetryCollection: false
             - task: TerraformCLI@0
               inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifest-out'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var env=$(DEV_ENV) -out $(Pipeline.Workspace)/terraform-manifest-out/$(DEV_ENV)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            
  
   

